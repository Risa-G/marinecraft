import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id("scala")
    id("maven-publish")
    id("net.neoforged.gradle.userdev") version ("7.0.120")
    id("idea")
}

version = project.property("mod_version") as String
group = project.property("mod_group_id") as String
val modId = project.property("mod_id") as String

base {
    archivesName = modId
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println(
    "Java: ${System.getProperty("java.version")}, JVM: ${System.getProperty("java.vm.version")} (${
        System.getProperty(
            "java.vendor"
        )
    }), Arch: ${System.getProperty("os.arch")}"
)
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty("forge.logging.markers", "REGISTRIES")

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty("forge.logging.console.level", "debug")

        modSource(project.sourceSets.main.get())
    }

    create("client") {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty("forge.enabledGameTestNamespaces", modId)
    }

    create("server") {
        systemProperty("forge.enabledGameTestNamespaces", modId)
        programArgument("--nogui")
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    create("gameTestServer") {
        systemProperty("forge.enabledGameTestNamespaces", modId)
    }

    create("data") {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file("run-data")

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll(
            "--mod",
            modId,
            "--all",
            "--output",
            file("src/generated/resources/").absolutePath,
            "--existing",
            file("src/main/resources/").absolutePath
        )
    }
}

// Include resources generated by data generators.
sourceSets.main {
    resources { srcDir("src/generated/resources") }
}

repositories {
    mavenCentral()
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            includeGroup("com.kotori316")
            includeGroup("org.typelevel")
        }
    }
    maven {
        name = "MavenTestGCP Fallback"
        url = uri("https://storage.googleapis.com/kotori316-maven-test-storage/maven/")
    }
    maven {
        name = "Kotori316 main"
        url = uri("https://maven.kotori316.com")
    }
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir "libs"
    // }
}

configurations {
    findByName("localRuntime")?.let {
        runtimeClasspath {
            extendsFrom(it)
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    implementation("net.neoforged:neoforge:${project.property("neoforge_version")}")

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    compileOnly(group = "org.scala-lang", name = "scala-library", version = "2.13.12")
    compileOnly(group = "org.scala-lang", name = "scala3-library_3", version = "3.3.3")
    compileOnly(group = "org.typelevel", name = "cats-core_3", version = "2.10.1-kotori")
    runtimeOnly(
        group = "com.kotori316",
        name = "ScalableCatsForce-NeoForge".lowercase(),
        version = "3.3.3-build-8",
        classifier = "with-library"
    ) {
        isTransitive = false
    }

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named("processResources", ProcessResources::class).configure {
    val replaceProperties = mapOf(
        "minecraft_version" to project.property("minecraft_version") as String,
        "minecraft_version_range" to project.property("minecraft_version_range") as String,
        "neoforge_version" to project.property("neoforge_version") as String,
        "neoforge_version_range" to project.property("neoforge_version_range") as String,
        "loader_version_range" to project.property("loader_version_range") as String,
        "mod_id" to modId,
        "mod_name" to project.property("mod_name") as String,
        "mod_license" to project.property("mod_license") as String,
        "mod_version" to project.property("mod_version") as String,
        "mod_authors" to project.property("mod_authors") as String,
        "mod_description" to project.property("mod_description") as String,
    )
    inputs.properties(replaceProperties)

    filesMatching(listOf("META-INF/mods.toml", "META-INF/neoforge.mods.toml", "pack.mcmeta")) {
        expand(replaceProperties + mapOf("project" to project.name))
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named("jar", Jar::class).configure {
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to modId,
                "Specification-Vendor" to project.property("mod_authors") as String,
                "Specification-Version" to "1", // We are version 1 of ourselves
                "Implementation-Title" to project.name,
                "Implementation-Version" to project.tasks.jar.get().archiveVersion,
                "Implementation-Vendor" to project.property("mod_authors") as String,
                "Implementation-Timestamp" to ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
            )
        )
    }

}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register("mavenJava", MavenPublication::class) {
            artifact(tasks.jar)
        }
    }
    repositories {
        maven {
            url = uri("file://${project.projectDir}/mcmodsrepo")
        }
    }
}

tasks.withType(JavaCompile::class).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}
